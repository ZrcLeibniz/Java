单例模式有八种方式：
1.饿汉式（静态常量）
	1>构造器私有化
	2>类的内部创建对象
	3>向外暴露一个静态的公共方法
	优点：写法较为简单，在类装载时就完成实例化。避免了线程同步问题
	缺点：在类装载时就完成实例化，如果从始至终从未使用过这个实例，则会造成内存的浪费
	这种方式基于classloader机制避免了多线程的同步问题，不过，instance在类装载时就实例化，在单例模式中大多数调用都是
	调用getInstance()，但是导致类装载的原因有很多种，因此不能确定有没有其他的方式（或其他的静态方法）导致类装载，这时候
	初始化Instance将就没有达到lazy loading的效果。
2.饿汉式（静态代码块）
	与第一种方式相比只是将类实例化的过程放在了静态代码块中，其余没有任何区别。
3.懒汉式（线程不安全）
	优点：起到了lazy loading的效果，但是只能在单线程下使用。
	缺点：如果在多线程情况下，一个线程进入了if(singlrton == null)判断语句块，还未来得及往下执行，另一个线程也通过了
	这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式。在实际开发中不要使用这种方式。
4.懒汉式（线程安全，同步方法）
	优点：解决了线程不安全的问题。
	缺点：效率低，每个线程在获得类的实例时，执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，
	后面的想获得该类实例，直接return就行了。方法进行同步效率太低。在实际开发中，不推荐适用这种方式。
5.懒汉式（线程安全，同步代码块）
	本意是对第四种方式的改进，但是不能起到线程同步的作用。在实际开发中不能使用这种方式。
6.双重检查
	实例化对象只执行了一次，线程安全.在实际开发中，推荐使用这种单例设计模式。
7.静态内部类
	使用了类装载机制保证初始化实例时只有一个线程。静态内部类方式在Singleton类被装载时不会立即实例化，而是在需要实例化时，调
	用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。类的静态属性只会在第一次加载
	类的时候初始化，所以在这里。JVM帮助我们保证了线程的安全性，因为在类进行初始化时，别的线程是无法进入的。避免了线性恒不安全，
	利用静态内部类特点实现延迟加载，效率高。推荐适用。
8.枚举
	借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。推荐使用。
	
JDK中的Runtime类的实例化就使用了饿汉式的单例模式。