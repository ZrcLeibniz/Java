图：
	图是一种数据结构，其中结点可以具有零个或多个相邻元素。两个节点之间的连接称为边。结点也可以成为顶点
	图的常用概念：
		顶点、边、路径、无向图、有向图、带权图
	图的表示方式：
		二维数组表示（邻接矩阵）、链表表示（邻接表）
	邻接矩阵：
		邻接矩阵是表示图形中顶点之间相邻关系的矩阵，对于n个顶点的图而言，矩阵的row和col表示的是1...n个点
	邻接表：
		1）邻接矩阵需要为每个顶点都分配n个边的空间，其实有很多边都是不存在的，会造成空间的一定损失
		2）邻接表的实现只关心存在的边，不关心不存在的边。因此没有空间浪费，邻接表由数组+链表组成
	图的深度优先遍历：
		1）深度优先遍历，从初始访问结点出发，初始访问结点可能有多个邻接结点，深度优先遍历的策略是首先访问第一个邻接结点，然后再以这个被访问的邻接结点作为初始结点，
		访问它的第一个邻接结点
		2）这样的访问策略是优先纵向挖掘深入，而不是对一个结点的所有邻结点进行横向访问
		3）深度优先搜索是一个递归的过程
		算法步骤：
			1）访问初始结点v，并标记结点v已访问
			2）查找结点v的第一个邻结点w
			3）若w存在，则继续执行4，如果w不存在，则从v的下一个结点继续
			4）若w未被访问，对w进行深度优先遍历递归
			5）查找结点v的w邻接结点的下一个结点，转到步骤3
	图的广度优先遍历算法：
		图的广度优先搜索类似于一个分层搜索的过程，广度优先遍历需要使用一个队列以保持访问节点的顺序，以便按这个顺序来访问这些结点的邻接结点
		算法步骤：
			1）访问初始结点v并标记结点v为已访问
			2）结点v入队列
			3）当队列非空时继续执行，否则算法结束
			4）出队列，取得头结点u
			5）查找u的第一个邻接结点w
			6）若结点u的邻接结点w不存在则转到步骤3；否则循环执行以下三个步骤
				6.1）若结点w尚未被访问，则访问结点w并标记为已访问
				6.2）结点w入队列
				6.3）查找结点u的继w邻接结点后的下一个邻接结点w                                                                                              