树：
	1）为什么需要树这种数据结构
		1>数组存储方式：
			优点：通过下标方式访问元素，速度快。对于有序数组，还可以使用二分查找提高检索速度
			缺点：如果要检索某个值，或者插入值（按一定顺序）会整体移动，效率较低
		2>链表存储方式：
			优点：在一定程度上对数组存储方式有优化。
			缺点：在进行检索时，效率仍然较低。
		3>树存储方式：
			能提高数据存储、读取的效率，比如利用二叉树，既可以保证数据的检索速度，同时也可以保证数据的插入、删除、修改速度
	2）树的常用术语：
		节点  根节点  父节点  子节点  叶子节点  节点的权  路径  层  子树  树的高度  森林
	3）二叉树：
		1>树有很多种，每个节点最多只能有两个子节点的一种形式成为二叉树，二叉树的子节点分为左节点和右节点
		2>如果该二叉树的所有叶子节点都在最后一层，并且结点总数=2^n-1，m为层数，则称该树为满二叉树
		3>如果二叉树的所有叶子节点都在最后一层或者倒数第二层，而且最后一层的叶子节点在左边连续，倒数第二层的叶子节点在右边连
		续，则称该树为完全二叉树
	4）遍历
		1>前序遍历：先输出父节点，再遍历左子树和右子树
		2>中序遍历：先遍历左子树，再输出父节点，再遍历右子树
		3>后序遍历：先遍历左子树，再遍历右子树，最后输出父节点
	5)查找
		1>前序查找
			1】先判断当前结点的no是否等于要查找的
			2】如果是相等的，则返回当前结点
			3】如果不等，则判断当前结点的左子结点是否为空，如果不为空，则递归前序查找
			4】如果左递归前序查找找到结点，则返回，否则继续判断当前结点的右子结点是否为空，若不为空，则继续向右递归前序查找
		2>中序查找
			1】先判断当前结点的左子节点是否为空，如果不为空，则递归中序查找
			2】如果找到则返回，否则就和当前结点比较，如果是则返回当前结点，否则继续进行右递归的中序查找
			3】如果右递归中序查找找到该值就返回，否则返回null
		3>后序查找
			1】判断当前结点的左子结点是否为空，如果不为空，则递归后序查找
			2】如果找到，则返回，若没有找到，就判断当前结点的右子结点是否为空，如果不为空，则右递归进行后续遍历查找
			3】若没有找到就和当前结点比较，如果是返回该结点，否则返回null
	6）删除
		1>如果删除的节点是叶子节点，则删除该节点
		2>如果删除的节点是非叶子节点，，则删除该子树
		操作的思路：
			1>因为我们的二叉树是单向的，所以我们是判断当前节点的子节点是否需要删除节点，而不能去判断当前节点是否为需要删除的节点
			2>如果当前节点的左子节点不为空，并且左子节点就是要删除的节点，那么就将this.left置为null即可
			3>如果当前节点的右子节点不为空，并且左子节点就是要删除的节点，那么就将this.right置为null即可
			4>如果第二步和第三步没有删除节点，那么我们需要向左子树进行递归删除
			5>如果第四步没有删除，应该向右子树进行递归删除
	7）顺序存储二叉树
		1>顺序存储二叉树通常只考虑完全二叉树
		2>第n个元素的左子节点为2*n+1
		3>第n个元素的右子结点为2*n+2
		4>第n个元素的父节点为（n-1）/2
		5>n：表示二叉树中的第几个元素（从0开始编号）
	8）线索化二叉树
		问题：将数列{1， 3， 6， 8， 10， 14}构建成二叉树
		分析：
			1>当我们对上面的二叉树进行中序遍历时，数列为{8， 3， 10， 1， 14， 6}
			2>但是6，8，10，14这几个节点的左右指针，并没有完全被利用上
			3>如果我们希望充分利用各个节点的左右指针，让各个节点可以指向自己的前后节点就需要使用线索二叉树
		1）n个节点二插链表中含有n+1个空指针域。利用二叉链表中的空指针域，存放指向节点在某种遍历次序下的前驱和后继节点的指针
		2）这种加上了线索的二叉链表称为线索二叉树。根据线索性质不同，线索二叉树可以分为前/中/后序线索二叉树三种
		3）一个节点的前一个节点称为前驱结点
		4）一个节点的后一个节点成为后继节点	
		说明：当线索化二叉树之后，Node节点的属性left和right，有如下情况
		1）left指向的是左子树，也可能指向前驱结点
		2）right指向的是右子树，也可能指向后继节点
		遍历：在线索化之后，各个节点的指向发生变化，因此原来节点的遍历方式不能使用，这时需要使用新的方式遍历线索化二叉树，各个节点
		可以通过线型方式遍历，因此无需使用递归方式，这样也提高了遍历的效率。遍历的次序应当和中序遍历保持一致
	9）赫夫曼树
		基本介绍：
			1)给定n个权值作为n个叶子结点，构造一颗二叉树，若该树的带权路径长度达到最小，称这样的二叉树为最优二叉树，也成为赫夫曼树
			2）赫夫曼树是带权路径长度最短的树，权值较大的距离根节点较劲
		重要概念：
			1）路径和路径长度：在一棵树中，从一个结点往下可以达到的孩子或孙子结点之间的通路成为路径。通路中分支的数目成为路径长度。若
			规定根结点的层数为1，则从跟结点到第L层节点的路径长度为L-1
			2）节点的权及带权路径长度：若将树种结点赋给一个有着某种含义的数值，则这个数值称为该结点的权。节点的带权路径长度为：从根结
			点到该结点之间的路径长度与该结底的权的乘积
			3）树的带权路径长度：树的带权路径长度规定为所有叶子结点的带权路径长度之和，记为WPL，权值越大的结点距离跟节点越近的二叉树
			才是最优二叉树
		创建思路：
			1）从小到大进行排序，将每一个数据都可以看作是一个结点，而每个结点可以看成是一颗最简单的二叉树
			2）取出根结点权值最小的两颗二叉树
			3）组成一个新的二叉树，该新的二叉树的根结点的权值是前面两颗二叉树根结点权值的和
			4）再将这颗新的二叉树，以根结点的权值大小再次排序，不断重复上述步骤，直到数列中，所有的数据都被处理就得到一颗赫夫曼树
	10）二叉排序树
		使用数组：
			1）数组未排序：可以直接在数组尾部添加元素，但是查到速度慢
			2）数组排序后，可以使用二分查找，查找速度快，但是插入时，为了保证数组有序，再添加新的元素时，需要找到插入位置，后面数据整体后移
		使用链式存储：
			不管链表是否有序，查找速度都慢，但是添加数据速度比1数组快1.
		使用二叉排序树：
				对于二叉排序树的任何一个非叶子节点，要求左子节点的值比当前节点的值小，右子节点的值比当前节点的值大。
		二叉排序树的删除：
			二叉排序树的删除情况比较复杂，有下面三种情况需要考虑
				1）删除叶子节点
				2）删除只有一颗子树的节点
				3）删除有两个子树的节点
	11）平衡二叉树
		基本介绍：
			1）平衡二叉树也叫平衡搜索树又被称为AVL树，可以保证查询效率
			2）具有以下特点：它是一颗空树或它的左右两个子树的高度相差的绝对值不超过1，并且左右两个子树都是一颗平衡二叉树。平衡二叉树的常用
			实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等
		AVL左旋转思路：
			1）创建一个新的结点newNode，值等于当前根节点的值
			2）把新节点的左子树设置为当前节点的左子树，newNode.left = left
			3）把新节点的右子树设置成当前节点的右子树的左子树，newNode.righrt = right.left
			4）把当前节点的值换位右子节点的值，value = right.value
			5）把当前节点的右子树设置成右子树的右子树，right = right.right
			5)把当前节点的左子树设置为新的节点，left = newNode
		AVL右旋转思路：
			1）创建一个新的结点newNode,值等于当前根节点的值
			2）把新节点的右子树设置为当前节点的右子树，newNode.right = this.right
			3)把新节点的左子树设置为当前节点左子节点的右子节点，newNode.left = this.left.right
			4)把当前节点的值换位左子节点的值，value = left.value
			5)把当前节点的左子树设置为左子树的左子树，this.left = this.left.left
			5）把当前节点的右子树设置为新节点,this.right = newNode
		AVL双旋转：
			问题分析：
				1）当符合右旋转时，如果它的左子树的右子树高度大于它的左子树的左子树高度时，需要先对当前节点的左节点进行左旋转再对当前节点进行右旋转
				操作
				2）当符合左旋转时，如果它的右子树的左子树高度大于它的右子树的右子树高度时，需要先对当前节点的右节点进行右旋转再对当前节点进行左旋转
				操作