二分查找：
	1）首先确定数组的中间下标位置mid = (left + right) / 2
	2）然后让需要查找的数findval和arr[mid]相比较
		2.1）findval>arr[mid]，说明需要查找的数在右边
		2.2）findval<arr[mid]，说明需要查找的数在左边
		2.3）findval=arr[mid]，说明找到，返回即可
	结束递归的条件：
		1）找到数字就结束递归
		2）递归完整个数组，仍然没有找到findval，也需要结束递归，也就是说当left>right就需要退出
		
插值查找：
	1）插值查找类似于二分查找，不同的1是插值查找每次1从自适应mid处开始查找
	2）将二分查找中的mid索引进行修改，其中key代表要查找的值
		midindex = low+(high-low)*(key-arr[low])/(arr[high]-arr[low])
	3）对于数据量大，关键字分布比较均匀的查找表来说，采用插值查找速度较快，不均匀的情况下，不一定优于二分查找

斐波那契查找：
	斐波那契查找原理与前两种相似，仅仅是改变了中间节点（mid）的位置，mid不再是中间或插值得到，而是位于黄金分割点附近
	即：mid = low+F(k-1)-1
	对于F(k-1)-1的理解：
		1）由斐波那契数列F(k)=F(k-1)+F(k-2)的性质，可以得到：
			(F(k)-1)=(F(k-1)-1)+(F(k-2)-1)+1
		该式说明：只要顺序表的长度为F(k)-1,则可以将该表分成长度为F(k-1)和F(k-2)两段，故有mid的公式
		2）类似的，每一字段也可以用相同的方式分割
		3）但是顺序表的长度n不一定刚好等于F(k)-1，所以需要将原来的顺序表长度n增加至F(k)-1。这里的k值只要能使
		F(k)-1的值大于或者等于n即可，顺序表长度增加后，新的位置都赋值为n位置的值即可
		