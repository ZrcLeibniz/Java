package zrc.sort;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

public class MergeSorting {
	public static void main(String[] args) {
		int[] arr = new int[80000000];
		for (int i = 0; i < 80000000; i++) {
			arr[i] = (int) (Math.random() * 80000000);
		}
		Date date1 = new Date();
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String datestr1 = sf.format(date1);
		System.out.println("排序前的时间是：" + datestr1);
		int[] temp = new int[arr.length];
		mergeSort(arr, 0, arr.length - 1, temp);
		Date date2 = new Date();
		String datestr2 = sf.format(date2);
		System.out.println("排序后的时间是：" + datestr2);
	}

	public static void mergeSort(int[] arr, int left, int right, int[] temp) {
		int mid = (left + right) / 2;
		if (left < right) {
			mergeSort(arr, left, mid, temp);
			mergeSort(arr, mid + 1, right, temp);
		}
		merge(arr, left, mid, right, temp);
	}

	/**
	 * 
	 * @param arr
	 *            排序的原始数组
	 * @param left
	 *            左边有序序列的初始索引
	 * @param mid
	 *            中间索引
	 * @param right
	 *            右边索引
	 * @param temp
	 *            做中转的数组
	 */
	public static void merge(int[] arr, int left, int mid, int right, int[] temp) {
		int i = left; // 初始化i， 左边有序序列的初始索引
		int j = mid + 1; // 初始化j，右边有序序列的初始索引
		int t = 0; // 指向temp数组的当前索引
		// 先把左右两边（有序）的数据按照规则填充到temp数组
		// 直到左右两边的有序序列，有一边处理完毕为止
		while (i <= mid && j <= right) {
			if (arr[i] <= arr[j]) {
				temp[t] = arr[i];
				t += 1;
				i += 1;
			} else {
				temp[t] = arr[j];
				t += 1;
				j += 1;
			}
		}
		// 把有剩余数据的一边的数据依次全部填充到temp
		while (i <= mid) {
			temp[t] = arr[i];
			t += 1;
			i += 1;
		}
		while (j <= right) {
			temp[t] = arr[j];
			t += 1;
			j += 1;
		}
		// 将temp数组的元素拷贝到arr
		t = 0;
		int tempLeft = left;
		while (tempLeft <= right) {
			arr[tempLeft] = temp[t];
			t += 1;
			tempLeft += 1;
		}
	}
}