<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!--
        SpringMVC思想是有一个前端控制器能拦截所有请求，并智能派发
        这个前端控制器是一个servlet，应该在web.xml中配置这个Servlet来拦截这些请求
    -->
    <servlet>
        <servlet-name>Dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springweb.xml</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>Dispatcher</servlet-name>
        <!--
            /*和/都是拦截所有请求，但是/*的范围更大，还会拦截到*.jsp这些请求
            /也会拦截所有请求，但是不会拦截*.jsp
            1)服务器的大web.xml中有一个DefaultServlet是url-pattern=/
            2)我们配置中前端控制器url-pattern=/，静态资源会来到DispatcherServlet看那个方法的RequestMapping是这个请求
            3)因为我们没有覆盖服务器中的JspServlet的配置
            4)/*直接就是拦截所有的请求
        -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>