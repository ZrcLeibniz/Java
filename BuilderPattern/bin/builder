建造者模式：
	建造者模式又称生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来，使这个抽象过程的不同实现方法可以构造
	出不同表现（属性）的对象。建造者模式是一步一步创建一个复杂的对象。它允许用户只通过制定复杂对象的类型和内容就可以建造它
	们，用户不需要知道内部的具体构建细节

建造者模式的四个角色：
	1）Product：一个具体的产品对象
	2）Builder：创建一个Product对象的各个部件指定的接口
	3）ConcreteBuilder：实现接口，构建和装配各个部件
	4）Director：构建一个使用Builder接口的对象，它主要是用于创建一个复杂的对象。
		1>隔离了客户与对象生产的成产过程
		2>负责控制产品对象的生产过程  

建造者模式在jdk中的StringBuilder有使用
	Appendable接口定义了多个append()方法，即为抽象建造者
	AbstractStringBuilder实现了Appenable接口的方法，是一个建造者，但是不能实例化
	StringBuilder即充当了指挥者角色，又充当了具体的建造者角色，建造方法的实现是由AbstractBuilder实现
	
注意事项：
	1）客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同建造过程可以创建不同的产品对象
	2）每一个建造者都相对独立，而与其他具体建造者无关，因此可以很方便地替换或增加新的具体建造者，用户使用不同的具体建造者
	即可得到不同的产品对象
	3）可以更加精细的控制产品的创建过程，将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来
	控制创建过程
	4）增加新的具体建造者无需修改原有的类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合"开闭原则"
	5）建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间差异较大，则不适合使用建造者模式
	6）如果产品内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得十分庞大，因此在这种情况下，要
	考虑是否使用建造者模式
	7）抽象工厂模式实现对产品家族的创建，一个产品家族式这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式不需
	要关心构建过程，只关心什么产品由什么工厂生产即可。而建造者模式是要求按照指定的蓝图建造产品，它的主要目的是通过组装配零
	件而产生一个新的产品